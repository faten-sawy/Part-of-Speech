{"ast":null,"code":"var _jsxFileName = \"E:\\\\New folder\\\\Part-of-Speech\\\\client\\\\src\\\\pages\\\\Speech.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"../components/progress\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialWord = {\n  id: 0,\n  word: '',\n  pos: ''\n};\nconst btns = ['noun', 'adverb', 'adjective', 'verb'];\nconst Speech = () => {\n  _s();\n  const [speeches, setSpeeches] = useState([initialWord]);\n  const [index, setIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const navigate = useNavigate();\n  useEffect(() => {\n    receiveData();\n  }, []);\n  const receiveData = async () => {\n    const res = await fetch('http://localhost:4000/words');\n    const data = await res.json();\n    setSpeeches(data);\n  };\n  const handleChoose = (item, e) => {\n    const ele = e.target;\n    const buttons = document.querySelectorAll('button');\n    const correctAnswer = speeches[index].pos;\n    resetButtonsStyle(buttons, true);\n    ele.disabled = false;\n\n    /* check if answer is correct or wrong */\n    if (item === correctAnswer) {\n      ele.setAttribute('style', 'background-color:green');\n      setScore(score + 10);\n    } else {\n      const correctElement = [...buttons].find(item => item.innerHTML === correctAnswer);\n      correctElement === null || correctElement === void 0 ? void 0 : correctElement.setAttribute('style', 'background-color:green');\n      ele.setAttribute('style', 'background-color:red');\n    }\n\n    /* change word */\n    changeToNextWord(ele, buttons);\n  };\n  const changeToNextWord = (element, buttons) => {\n    setTimeout(() => {\n      /* navigate to rank page if words finished */\n      if (index === 9) {\n        navigate(\"/score-rank\", {\n          state: {\n            score\n          }\n        });\n      }\n      setIndex(index + 1);\n      resetButtonsStyle(buttons, false);\n    }, 2000);\n  };\n  const resetButtonsStyle = (buttons, value) => {\n    buttons.forEach(item => {\n      item.disabled = value;\n      item.setAttribute(\"style\", \"background-color:none\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gradient-to-br from-[#09203f]  via-[#2d4a69] to-[#537895] h-[100vh]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second--container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"word--style\",\n        children: speeches[index].word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        value: index / 10 * 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons--container\",\n        children: btns.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: e => handleChoose(item, e),\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n};\n_s(Speech, \"K0QX5RGivaOIFxxy7aD/aac49AY=\", false, function () {\n  return [useNavigate];\n});\n_c = Speech;\nexport default Speech;\nvar _c;\n$RefreshReg$(_c, \"Speech\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","ProgressBar","initialWord","id","word","pos","btns","Speech","speeches","setSpeeches","index","setIndex","score","setScore","navigate","receiveData","res","fetch","data","json","handleChoose","item","e","ele","target","buttons","document","querySelectorAll","correctAnswer","resetButtonsStyle","disabled","setAttribute","correctElement","find","innerHTML","changeToNextWord","element","setTimeout","state","value","forEach","map"],"sources":["E:/New folder/Part-of-Speech/client/src/pages/Speech.tsx"],"sourcesContent":["import React, { useEffect,useState } from \"react\"\r\nimport {useNavigate} from \"react-router-dom\"\r\nimport ProgressBar from \"../components/progress\"\r\n\r\ninterface word{\r\n    id:number,\r\n    word:string,\r\n    pos:string\r\n}\r\nconst initialWord = {\r\n    id:0,\r\n    word:'',\r\n    pos:''\r\n}\r\nconst btns =['noun','adverb','adjective','verb']\r\n\r\nconst Speech = () => {\r\n    const [speeches,setSpeeches] = useState<word[]>([initialWord])\r\n    const [index,setIndex] = useState(0)\r\n    const [score,setScore] = useState(0)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(()=>{\r\n        receiveData()       \r\n    },[])\r\n\r\n    const receiveData = async ()=>{\r\n      const res = await fetch('http://localhost:4000/words')\r\n      const data = await res.json()\r\n      setSpeeches(data)\r\n    }\r\n    \r\n    const handleChoose =(item:string,e:React.FormEvent) =>{\r\n      const ele = e.target as HTMLButtonElement\r\n      const buttons = document.querySelectorAll('button')\r\n      const correctAnswer = speeches[index].pos;\r\n\r\n      resetButtonsStyle(buttons,true)\r\n      ele.disabled =false\r\n      \r\n      /* check if answer is correct or wrong */\r\n      if(item === correctAnswer){\r\n        ele.setAttribute('style','background-color:green')\r\n        setScore(score+10)\r\n      }\r\n      else{\r\n        const correctElement = [...buttons].find(\r\n          (item: HTMLButtonElement) =>\r\n              item.innerHTML === correctAnswer\r\n          );\r\n        correctElement?.setAttribute('style','background-color:green')\r\n        ele.setAttribute('style','background-color:red')\r\n      }\r\n  \r\n      /* change word */\r\n      changeToNextWord(ele,buttons)\r\n       \r\n    }\r\n\r\n    const changeToNextWord = (element:HTMLButtonElement,buttons:NodeListOf<HTMLButtonElement>)=>{\r\n\r\n      setTimeout(() => {\r\n        /* navigate to rank page if words finished */\r\n        if (index === 9) {\r\n          navigate(\"/score-rank\", { state: { score } });\r\n        }\r\n        setIndex(index + 1);\r\n        resetButtonsStyle(buttons, false);\r\n      }, 2000);\r\n\r\n    }\r\n\r\n    const resetButtonsStyle = (buttons:NodeListOf<HTMLButtonElement> , value:boolean)=>{\r\n      buttons.forEach((item)=>{\r\n          item.disabled = value\r\n          item.setAttribute(\"style\", \"background-color:none\");\r\n      })\r\n    }\r\n    return (\r\n      <div className=\"bg-gradient-to-br from-[#09203f]  via-[#2d4a69] to-[#537895] h-[100vh]\">\r\n        <div className=\"second--container\">\r\n          <h1 className=\"word--style\">{speeches[index].word}</h1>\r\n\r\n          <ProgressBar value={(index / 10) * 100} />\r\n\r\n          <div className=\"buttons--container\">\r\n            {btns.map((item: string) => (\r\n              <div className=\"button-container\">\r\n                <button\r\n                  className=\"button\"\r\n                  onClick={(e) => handleChoose(item, e)}\r\n                >\r\n                  {item}\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Speech"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}