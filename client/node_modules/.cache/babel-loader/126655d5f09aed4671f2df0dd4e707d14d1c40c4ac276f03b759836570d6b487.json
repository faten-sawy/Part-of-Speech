{"ast":null,"code":"var _jsxFileName = \"E:\\\\Typescript Projects\\\\Ngwa Task\\\\client\\\\src\\\\pages\\\\Speech.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialWord = {\n  id: 0,\n  word: '',\n  pos: ''\n};\nconst btns = ['noun', 'adverb', 'adjective', 'verb'];\nconst Speach = () => {\n  _s();\n  const [speeches, setSpeeches] = useState([initialWord]);\n  const [index, setIndex] = useState(0);\n  const [answer, setAnswer] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    receveData();\n  }, []);\n  const receveData = async () => {\n    const res = await fetch('http://localhost:5000/words');\n    const s = await res.json();\n    setSpeeches(s);\n    console.log(s);\n  };\n  const handleChoose = (item, e) => {\n    const ele = e.target;\n    const buttons = document.querySelectorAll('button');\n    console.log(buttons);\n    buttons.forEach(item => {\n      console.log(item);\n      item.setAttribute('disabled', 'false');\n    });\n    ele.setAttribute('disabled', 'true');\n    if (item === speeches[index].pos) {\n      setAnswer('correct answer');\n      ele.setAttribute('style', 'background-color:green');\n    } else {\n      setAnswer('wrong answer');\n      ele.setAttribute('style', 'background-color:red');\n    }\n    setTimeout(() => {\n      setAnswer('');\n      ele.setAttribute('style', 'background-color:none');\n      if (index === 9) {\n        navigate('/score-rank');\n      }\n      setIndex(index + 1);\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: speeches[index].word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [index / 10 * 100, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }, this), btns.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => handleChoose(item, e),\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n_s(Speach, \"fyiOMapqiztKCO8bJuloz4N6TbQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Speach;\nexport default Speach;\nvar _c;\n$RefreshReg$(_c, \"Speach\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","initialWord","id","word","pos","btns","Speach","speeches","setSpeeches","index","setIndex","answer","setAnswer","navigate","receveData","res","fetch","s","json","console","log","handleChoose","item","e","ele","target","buttons","document","querySelectorAll","forEach","setAttribute","setTimeout","map"],"sources":["E:/Typescript Projects/Ngwa Task/client/src/pages/Speech.tsx"],"sourcesContent":["import React, { useEffect,useState } from \"react\"\r\nimport {useNavigate} from \"react-router-dom\"\r\n\r\ninterface word{\r\n    id:number,\r\n    word:string,\r\n    pos:string\r\n}\r\nconst initialWord = {\r\n    id:0,\r\n    word:'',\r\n    pos:''\r\n}\r\nconst btns =['noun','adverb','adjective','verb']\r\nconst Speach = () => {\r\n    const [speeches,setSpeeches] = useState<word[]>([initialWord])\r\n    const [index,setIndex] = useState(0)\r\n    const [answer,setAnswer] = useState('')\r\n\r\n    const navigate = useNavigate()\r\n\r\n    \r\n\r\n\r\n    useEffect(()=>{\r\n        receveData()\r\n        \r\n    },[])\r\n\r\n    const receveData = async ()=>{\r\n        const res = await fetch('http://localhost:5000/words')\r\n        const s = await res.json()\r\n        setSpeeches(s)\r\n\r\n        console.log(s)\r\n    }\r\n    \r\n    const handleChoose =(item:string,e:React.FormEvent) =>{\r\n        const ele = e.target as HTMLButtonElement\r\n\r\n        const buttons = document.querySelectorAll('button')\r\n\r\n        console.log(buttons)\r\n\r\n        buttons.forEach((item)=>{\r\n            console.log(item)\r\n            item.setAttribute('disabled','false')\r\n        })\r\n        ele.setAttribute('disabled','true')\r\n        \r\n        if(item === speeches[index].pos){\r\n            setAnswer('correct answer')\r\n            ele.setAttribute('style','background-color:green')\r\n\r\n        }\r\n        else{\r\n            setAnswer('wrong answer')\r\n            ele.setAttribute('style','background-color:red')\r\n\r\n        }\r\n    \r\n\r\n        setTimeout(()=>{\r\n            \r\n            setAnswer('')\r\n            ele.setAttribute('style','background-color:none')\r\n\r\n            if(index === 9){\r\n                navigate('/score-rank')\r\n\r\n            }\r\n            setIndex(index+1)\r\n        },3000)\r\n    \r\n\r\n\r\n    }\r\n    return(\r\n        <>\r\n       <p>{speeches[index].word}</p>\r\n       <p>{answer}</p>\r\n       <p>{(index/10)*100}%</p>\r\n       {btns.map((item:string)=>(\r\n            <button onClick={(e)=>handleChoose(item,e)}>\r\n                {item}\r\n            </button>\r\n       ))\r\n       }\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Speach"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}